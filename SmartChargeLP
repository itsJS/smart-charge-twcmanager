# %%
from scipy.optimize import linprog

powerwallsSoc = 1
amps = 10
duration = 9

beta_is_sunny = 1
if amps >= 5:
    beta_is_sunny = 1
else: 
    beta_is_sunny = 0

solar_power = beta_is_sunny*220*amps*duration*(1/1000)
powerwall_power = powerwallsSoc * 24.4

#Coefficients for x_i, respectively where i = 1..3 ==> x1 - (beta*220*a*d*x2) + powerwallsSoc*x3
objective_function = [1, solar_power, powerwall_power]

lhs_ineq = [[0, 0, -powerwall_power],               # Min. Remaining Power in Powerwall [kwh]
            [0, 0, powerwall_power],                # Max. Remaining Power in Powerwall [kwh]
            [-1, -solar_power, -powerwall_power],   # Min. Supplied Total Power in [kwh]
            [1, solar_power, powerwall_power]]      # Max. Supplied Total Power in [kwh]

rhs_ineq = [-4.88,   # Min. Remaining Power in Powerwall [kwh]
            24.4,    # Max. Remaining Power in Powerwall [kwh]
            -29.3,   # Min. Supplied Total Power [kwh]
            89.3]    # Max. Supplied Total Power [kwh]
              

bnd = [(0, float("inf")),  # Bounds of x1 --> Grid
       (0, 1),             # Bounds of X2 --> Solar
       (0, 1)]             # Bounds of x3 --> Powerwall
       
opt = linprog(c=objective_function, 
              A_ub=lhs_ineq, 
              b_ub=rhs_ineq, 
              bounds=bnd, 
              method="revised simplex")

print(opt)
'''
                              -(powerwallsSoc*24.4 * x3)  <= -4,88           // -(0.2 * 24,4) = 4,88;
                                powerwallsSoc*24.4 * x3   <=  19,52          // 0.8 * 24,4 = 19,52
- x1 - (beta * 220 * a * d / 1000)x2 - powerwallsSoc * x3   <= -29,3           //-14,3 -(0,2 * 75) = -29,3 ;
x1 + (beta * 220 * a * d / 1000)x2 + powerwallsSoc * x3     <=  89,3           // 14,3 + 75 = 89,3
                             

x1 >= 0
x2 >= 0
x3 = [0,1];
'''
# %%
